#include "bp/simple_tree.hpp"

#include <gtest/gtest.h>

#include <cstdint>
#include <cstdlib>
#include <vector>

namespace ads_test {

TEST(ads_test_suite, simple_tree_test) {
  ads::bp::SimpleTree tree;
  ASSERT_EQ(tree.get_bp_representation(), "()");

  tree.insert_node(tree.root, 1, 0);
  tree.insert_node(tree.root, 1, 0);
  tree.insert_node(tree.root, 1, 0);
  tree.insert_node(tree.i_th_child(tree.root, 1), 1, 0);
  tree.insert_node(tree.i_th_child(tree.root, 1), 1, 0);
  tree.insert_node(tree.i_th_child(tree.root, 1), 1, 0);
  ASSERT_EQ(tree.get_bp_representation(), "((()()())()())");

  tree.insert_node(tree.i_th_child(tree.root, 1), 2, 2);
  ASSERT_EQ(tree.get_bp_representation(), "((()(()()))()())");

  ASSERT_EQ(tree.parent(tree.i_th_child(tree.root, 3)), tree.root);
  ASSERT_EQ(tree.subtree_size(tree.root), 8);

  tree.delete_node(tree.i_th_child(tree.root, 1));
  ASSERT_EQ(tree.get_bp_representation(), "(()(()())()())");
  tree.delete_node(tree.i_th_child(tree.root, 1));
  ASSERT_EQ(tree.get_bp_representation(), "((()())()())");

  tree.insert_node(tree.root, 2, 2);
  ASSERT_EQ(tree.get_bp_representation(), "((()())(()()))");
}

TEST(ads_test_suite, simple_tree_big_test) {
  ads::bp::SimpleTree tree;

  for (size_t i = 0; i < 1000; ++i) {
    tree.insert_node(tree.root, 1, (i + 1) % 6 == 0 ? 3 : 0);
  }
  ASSERT_EQ(
      tree.get_bp_representation(),
      "(()()()()(()()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()"
      "()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()"
      "()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()"
      "()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()"
      "()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()"
      "()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()"
      "()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()"
      "()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()"
      "()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()"
      "()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()"
      "()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()"
      "()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()"
      "()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()"
      "()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()"
      "()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()"
      "()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()"
      "()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()"
      "()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()"
      "()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()"
      "()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()"
      "()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()"
      "()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()"
      "()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()"
      "()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()"
      "()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()"
      "()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()"
      "()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()()())()()(()"
      "()())()()(()()())()()(()()())()()(()()())()()(()()())()())");
  ASSERT_EQ(tree.space_used(), 17416);

  const size_t n = tree.subtree_size(tree.root) - 1;
  for (size_t i = 0; i < n; ++i) {
    // std::cout << tree.get_bp_representation() << std::endl;
    tree.delete_node(tree.i_th_child(tree.root, 1));
  }
  ASSERT_EQ(tree.get_bp_representation(), "()");
}

}  // namespace ads_test
